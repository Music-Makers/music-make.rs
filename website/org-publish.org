#+TITLE: Org Publish: On top of export.

* Cache

Because we have many different ways of looking and exporting files that may or
may not happen simultainously a cache is a nice thing to have.

#+begin_src emacs-lisp

#+end_src
* Publish needed?

#+begin_src emacs-lisp
(defun mm.rs/org-publish-needed-p (filename &optional project)
  (setq filename (file-truename filename))
  (let* ((project
	  (or project
	      (org-publish-get-project-from-filename filename)
	      (user-error "MMRS-publish check!File %S is not part of any known project"
			  (abbreviate-file-name filename))))
	 (project-plist (cdr project))
	 (publishing-function
	  (pcase (org-publish-property :publishing-function project)
	    (`nil (user-error "No publishing function chosen"))
	    ((and f (pred listp)) f)
	    (f (list f))))
	 (base-dir
	  (file-name-as-directory
	   (or (org-publish-property :base-directory project)
	       (user-error "Project %S does not have :base-directory defined"
			   (car project)))))
	 (pub-base-dir
	  (file-name-as-directory
	   (or (org-publish-property :publishing-directory project)
	       (user-error
		"Project %S does not have :publishing-directory defined"
		(car project)))))
	 (pub-dir
	  (file-name-directory
	   (expand-file-name (file-relative-name filename base-dir)
			     pub-base-dir))))

    (cl-some (lambda (f)
                       (org-publish-needed-p filename pub-base-dir f pub-dir base-dir))
                     publishing-function)))
#+end_src


* Publish Alist
#+begin_src emacs-lisp :noweb-ref mmrs-publish-alist
;;  Org provides ox-publish specifically for publishing Org projects as
;;  websites.
(require 'ox-publish)

(setq org-publish-project-alist
      `(("pages"
         :base-directory ,(mm.rs/expand-file-name "org/")
         :base-extension "org"
         :recursive t
         :publishing-directory ,(mm.rs/expand-file-name "html/")
         :publishing-function mm.rs/publish-to-html
         :html-doctype "html5"
         :html-head-include-default-style nil
         :html-head-include-scripts nil
         :with-title nil
         :with-toc nil
         :html-head ,(mm.rs/html-head))
        ("dev"
         :base-directory ,(mm.rs/expand-file-name "website/")
         :base-extension "org"
         :recursive t
         :publishing-directory ,(mm.rs/expand-file-name "html/website/")
         :publishing-function mm.rs/publish-to-html
         :html-doctype "html5"
         :html-head-include-default-style nil
         :html-head-include-scripts nil
         :with-title nil
         :with-toc nil
         :html-head ,(mm.rs/html-head))
        ("dev-static"
         :base-directory ,(mm.rs/expand-file-name "website/")
         :base-extension "css\\|txt\\|jpg\\|gif\\|png"
         :recursive t
         :publishing-directory ,(mm.rs/expand-file-name "html/website/")
         :publishing-function org-publish-attachment)
        ("static"
         :base-directory ,(mm.rs/expand-file-name "org/")
         :base-extension "css\\|txt\\|jpg\\|gif\\|png"
         :recursive t
         :publishing-directory  ,(mm.rs/expand-file-name "html/")
         :publishing-function org-publish-attachment)

        ("music-make.rs" :components ("pages" "static" "dev" "dev-static"))))

#+end_src
